diff --git a/node_modules/@expo/cli/build/src/run/android/index.js b/node_modules/@expo/cli/build/src/run/android/index.js
index 9ccd32a..0ba8904 100644
--- a/node_modules/@expo/cli/build/src/run/android/index.js
+++ b/node_modules/@expo/cli/build/src/run/android/index.js
@@ -76,6 +76,7 @@ const expoRunAndroid = async (argv)=>{
         "--no-install": Boolean,
         "--no-bundler": Boolean,
         "--variant": String,
+        "--appId": String,
         // Unstable, temporary fallback to disable active archs only behavior
         // TODO: replace with better fallback option, like free-form passing gradle props
         "--all-arch": Boolean,
@@ -101,6 +102,7 @@ const expoRunAndroid = async (argv)=>{
     --no-build-cache       Clear the native build cache
     --no-install           Skip installing dependencies
     --no-bundler           Skip starting the bundler
+    --appId                Android application Id
     --variant <name>       Build variant. {dim Default: debug}
     -d, --device [device]  Device name to run the app on
     -p, --port <port>      Port to start the dev server on. {dim Default: 8081}
@@ -121,6 +123,7 @@ const expoRunAndroid = async (argv)=>{
         port: args["--port"],
         variant: args["--variant"],
         allArch: args["--all-arch"],
+        appId: args["--appId"],
         // Custom parsed args
         device: parsed.args["--device"]
     }).catch(_errors.logCmdError);
diff --git a/node_modules/@expo/cli/build/src/run/android/runAndroidAsync.js b/node_modules/@expo/cli/build/src/run/android/runAndroidAsync.js
index bd1413b..b277716 100644
--- a/node_modules/@expo/cli/build/src/run/android/runAndroidAsync.js
+++ b/node_modules/@expo/cli/build/src/run/android/runAndroidAsync.js
@@ -31,6 +31,7 @@ function _interopRequireDefault(obj) {
 const debug = require("debug")("expo:run:android");
 async function runAndroidAsync(projectRoot, { install , ...options }) {
     var ref;
+
     // NOTE: This is a guess, the developer can overwrite with `NODE_ENV`.
     (0, _nodeEnv.setNodeEnv)(options.variant === "release" ? "production" : "development");
     require("@expo/env").load(projectRoot);
@@ -38,6 +39,7 @@ async function runAndroidAsync(projectRoot, { install , ...options }) {
         platform: "android",
         install
     });
+    
     const props = await (0, _resolveOptions.resolveOptionsAsync)(projectRoot, options);
     debug("Package name: " + props.packageName);
     _log.Log.log("â€º Building app...");
@@ -57,11 +59,13 @@ async function runAndroidAsync(projectRoot, { install , ...options }) {
         port: props.port,
         // If a scheme is specified then use that instead of the package name.
         scheme: (ref = await (0, _scheme.getSchemesForAndroidAsync)(projectRoot)) == null ? void 0 : ref[0],
-        headless: !props.shouldStartBundler
+        headless: !props.shouldStartBundler,
+        appId: options?.appId
     });
     await installAppAsync(androidProjectRoot, props);
+
     await manager.getDefaultDevServer().openCustomRuntimeAsync("emulator", {
-        applicationId: props.packageName
+        applicationId: options?.appId ?? props.packageName
     }, {
         device: props.device.device
     });
diff --git a/node_modules/@expo/cli/build/src/run/ios/index.js b/node_modules/@expo/cli/build/src/run/ios/index.js
index 0332886..c7314d4 100644
--- a/node_modules/@expo/cli/build/src/run/ios/index.js
+++ b/node_modules/@expo/cli/build/src/run/ios/index.js
@@ -75,6 +75,7 @@ const expoRunIos = async (argv)=>{
         "--no-install": Boolean,
         "--no-bundler": Boolean,
         "--configuration": String,
+        "--appId": String,
         "--port": Number,
         // Aliases
         "-p": "--port",
@@ -92,6 +93,7 @@ const expoRunIos = async (argv)=>{
             `--no-install                     Skip installing dependencies`,
             `--no-bundler                     Skip starting the Metro bundler`,
             `--scheme [scheme]                Scheme to build`,
+            `--appId                          IOS bundle identifier`,
             (0, _chalk().default)`--configuration <configuration>  Xcode configuration to use. Debug or Release. {dim Default: Debug}`,
             `-d, --device [device]            Device name or UDID to build the app on`,
             (0, _chalk().default)`-p, --port <port>                Port to start the Metro bundler on. {dim Default: 8081}`,
@@ -116,6 +118,7 @@ const expoRunIos = async (argv)=>{
         install: !args["--no-install"],
         bundler: !args["--no-bundler"],
         port: args["--port"],
+        appId: args["--appId"],
         // Custom parsed args
         device: parsed.args["--device"],
         scheme: parsed.args["--scheme"],
diff --git a/node_modules/@expo/cli/build/src/run/ios/launchApp.js b/node_modules/@expo/cli/build/src/run/ios/launchApp.js
index e2a78ae..b96a024 100644
--- a/node_modules/@expo/cli/build/src/run/ios/launchApp.js
+++ b/node_modules/@expo/cli/build/src/run/ios/launchApp.js
@@ -72,7 +72,7 @@ function _interopRequireWildcard(obj, nodeInterop) {
     return newObj;
 }
 async function launchAppAsync(binaryPath, manager, props) {
-    const appId = await (0, _profile.profile)(getBundleIdentifierForBinaryAsync)(binaryPath);
+    const appId = props?.appId ?? await (0, _profile.profile)(getBundleIdentifierForBinaryAsync)(binaryPath);
     if (!props.isSimulator) {
         if (props.device.osType === "macOS") {
             await (0, _devicectl.launchBinaryOnMacAsync)(appId, binaryPath);
diff --git a/node_modules/@expo/cli/build/src/run/ios/runIosAsync.js b/node_modules/@expo/cli/build/src/run/ios/runIosAsync.js
index a59eb81..6ab1428 100644
--- a/node_modules/@expo/cli/build/src/run/ios/runIosAsync.js
+++ b/node_modules/@expo/cli/build/src/run/ios/runIosAsync.js
@@ -98,13 +98,15 @@ async function runIosAsync(projectRoot, options) {
         port: props.port,
         headless: !props.shouldStartBundler,
         // If a scheme is specified then use that instead of the package name.
-        scheme: (ref = await (0, _scheme.getSchemesForIosAsync)(projectRoot)) == null ? void 0 : ref[0]
+        scheme: (ref = await (0, _scheme.getSchemesForIosAsync)(projectRoot)) == null ? void 0 : ref[0],
+        appId: options?.appId
     });
     // Install and launch the app binary on a device.
     await (0, _launchApp.launchAppAsync)(binaryPath, manager, {
         isSimulator: props.isSimulator,
         device: props.device,
-        shouldStartBundler: props.shouldStartBundler
+        shouldStartBundler: props.shouldStartBundler,
+        appId: options?.appId
     });
     // Log the location of the JS logs for the device.
     if (props.shouldStartBundler) {
diff --git a/node_modules/@expo/cli/build/src/run/startBundler.js b/node_modules/@expo/cli/build/src/run/startBundler.js
index 74120d1..3bbda48 100644
--- a/node_modules/@expo/cli/build/src/run/startBundler.js
+++ b/node_modules/@expo/cli/build/src/run/startBundler.js
@@ -69,7 +69,7 @@ function _interopRequireWildcard(obj, nodeInterop) {
     }
     return newObj;
 }
-async function startBundlerAsync(projectRoot, { port , headless , scheme  }) {
+async function startBundlerAsync(projectRoot, { port , headless , scheme, appId  }) {
     const options = {
         port,
         headless,
@@ -90,7 +90,8 @@ async function startBundlerAsync(projectRoot, { port , headless , scheme  }) {
         });
         var _platforms;
         await (0, _startInterface.startInterfaceAsync)(devServerManager, {
-            platforms: (_platforms = exp.platforms) != null ? _platforms : []
+            platforms: (_platforms = exp.platforms) != null ? _platforms : [],
+            appId
         });
     } else {
         var ref;
diff --git a/node_modules/@expo/cli/build/src/start/index.js b/node_modules/@expo/cli/build/src/start/index.js
index a665d43..ba0e735 100644
--- a/node_modules/@expo/cli/build/src/start/index.js
+++ b/node_modules/@expo/cli/build/src/start/index.js
@@ -82,6 +82,7 @@ const expoStart = async (argv)=>{
         "--localhost": Boolean,
         "--offline": Boolean,
         "--go": Boolean,
+        "--appId": String,
         // Aliases
         "-h": "--help",
         "-c": "--clear",
@@ -119,6 +120,7 @@ const expoStart = async (argv)=>{
             `--localhost                     Same as --host localhost`,
             ``,
             `--offline                       Skip network requests and use anonymous manifest signatures`,
+            `--appId                         Android application id or ios bundle identifier`,
             `--https                         Start the dev server with https protocol`,
             `--scheme <scheme>               Custom URI protocol to use when launching an app`,
             (0, _chalk().default)`-p, --port <number>             Port to start the dev server on (does not apply to web or tunnel). {dim Default: 8081}`,
diff --git a/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js b/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
index 55f2a3a..210cc3a 100644
--- a/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
+++ b/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
@@ -80,7 +80,7 @@ class DevServerManagerActions {
             try {
                 const nativeRuntimeUrl = devServer.getNativeRuntimeUrl();
                 const interstitialPageUrl = devServer.getRedirectUrl();
-                (0, _commandsTable.printQRCode)(interstitialPageUrl != null ? interstitialPageUrl : nativeRuntimeUrl);
+                // (0, _commandsTable.printQRCode)(interstitialPageUrl != null ? interstitialPageUrl : nativeRuntimeUrl);
                 if (interstitialPageUrl) {
                     _log.log((0, _commandsTable.printItem)((0, _chalk().default)`Choose an app to open your project at {underline ${interstitialPageUrl}}`));
                 }
@@ -91,12 +91,12 @@ class DevServerManagerActions {
                     })}`);
                 }
                 _log.log((0, _commandsTable.printItem)((0, _chalk().default)`Metro waiting on {underline ${nativeRuntimeUrl}}`));
-                if (options.devClient === false) {
-                    // TODO: if development build, change this message!
-                    _log.log((0, _commandsTable.printItem)("Scan the QR code above with Expo Go (Android) or the Camera app (iOS)"));
-                } else {
-                    _log.log((0, _commandsTable.printItem)("Scan the QR code above to open the project in a development build. " + (0, _link.learnMore)("https://expo.fyi/start")));
-                }
+                // if (options.devClient === false) {
+                //     // TODO: if development build, change this message!
+                //     _log.log((0, _commandsTable.printItem)("Scan the QR code above with Expo Go (Android) or the Camera app (iOS)"));
+                // } else {
+                //     _log.log((0, _commandsTable.printItem)("Scan the QR code above to open the project in a development build. " + (0, _link.learnMore)("https://expo.fyi/start")));
+                // }
             } catch (error) {
                 console.log("err", error);
                 // @ts-ignore: If there is no development build scheme, then skip the QR code.
diff --git a/node_modules/@expo/cli/build/src/start/interface/startInterface.js b/node_modules/@expo/cli/build/src/start/interface/startInterface.js
index 57d60cd..e262bda 100644
--- a/node_modules/@expo/cli/build/src/start/interface/startInterface.js
+++ b/node_modules/@expo/cli/build/src/start/interface/startInterface.js
@@ -173,7 +173,8 @@ async function startInterfaceAsync(devServerManager, options) {
             } else {
                 try {
                     await server.openPlatformAsync(settings.launchTarget, {
-                        shouldPrompt
+                        shouldPrompt,
+                        appId: options?.appId
                     });
                     (0, _commandsTable.printHelp)();
                 } catch (error1) {
diff --git a/node_modules/@expo/cli/build/src/start/platforms/PlatformManager.js b/node_modules/@expo/cli/build/src/start/platforms/PlatformManager.js
index 3e1034a..afe55b2 100644
--- a/node_modules/@expo/cli/build/src/start/platforms/PlatformManager.js
+++ b/node_modules/@expo/cli/build/src/start/platforms/PlatformManager.js
@@ -115,6 +115,7 @@ class PlatformManager {
             platform: this.props.platform,
             installedExpo: false
         });
+
         if (!url) {
             url = this._resolveAlternativeLaunchUrl(applicationId, props);
         }
diff --git a/node_modules/@expo/cli/build/src/start/platforms/android/AndroidPlatformManager.js b/node_modules/@expo/cli/build/src/start/platforms/android/AndroidPlatformManager.js
index 11db4a2..011835b 100644
--- a/node_modules/@expo/cli/build/src/start/platforms/android/AndroidPlatformManager.js
+++ b/node_modules/@expo/cli/build/src/start/platforms/android/AndroidPlatformManager.js
@@ -17,6 +17,7 @@ class AndroidPlatformManager extends _platformManager.PlatformManager {
             ...options,
             resolveDeviceAsync: _androidDeviceManager.AndroidDeviceManager.resolveAsync
         });
+        this.packageName = undefined
         this.projectRoot = projectRoot;
         this.port = port;
     }
@@ -26,11 +27,18 @@ class AndroidPlatformManager extends _platformManager.PlatformManager {
         ]);
         return super.openAsync(options, resolveSettings);
     }
+    async updatePackageName() {
+        this.packageName = await this._getAppIdResolver().getAppIdFromNativeAsync()
+    }
     _getAppIdResolver() {
         return new _androidAppIdResolver.AndroidAppIdResolver(this.projectRoot);
     }
     _resolveAlternativeLaunchUrl(applicationId, props) {
         var ref;
+        if(this.packageName && this.packageName !== applicationId){
+            // Run app with custom application Id
+            return (ref = props == null ? void 0 : props.launchActivity) != null ? ref : `${applicationId}/${this.packageName}.MainActivity`;
+        }
         return (ref = props == null ? void 0 : props.launchActivity) != null ? ref : `${applicationId}/.MainActivity`;
     }
 }
diff --git a/node_modules/@expo/cli/build/src/start/resolveOptions.js b/node_modules/@expo/cli/build/src/start/resolveOptions.js
index 2ab71b3..4b4921e 100644
--- a/node_modules/@expo/cli/build/src/start/resolveOptions.js
+++ b/node_modules/@expo/cli/build/src/start/resolveOptions.js
@@ -70,6 +70,7 @@ async function resolveOptionsAsync(projectRoot, args) {
         clear: !!args["--clear"],
         dev: !args["--no-dev"],
         https: !!args["--https"],
+        appId: args["--appId"],
         maxWorkers: args["--max-workers"],
         port: args["--port"],
         minify: !!args["--minify"],
diff --git a/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js b/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
index 7906e87..4cad39a 100644
--- a/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
+++ b/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
@@ -30,6 +30,8 @@ const _delay = require("../../utils/delay");
 const _env = require("../../utils/env");
 const _errors = require("../../utils/errors");
 const _open = require("../../utils/open");
+
+
 function _interopRequireDefault(obj) {
     return obj && obj.__esModule ? obj : {
         default: obj
@@ -332,8 +334,10 @@ class BundlerDevServer {
         }
         const runtime = this.isTargetingNative() ? this.isDevClient ? "custom" : "expo" : "web";
         const manager = await this.getPlatformManagerAsync(launchTarget);
+        const props = resolver?.appId ? { applicationId : resolver?.appId, packageName: resolver?.packageName  } : undefined
         return manager.openAsync({
-            runtime
+            runtime,
+            props
         }, resolver);
     }
     /** Open the dev server in a runtime. */ async openCustomRuntimeAsync(launchTarget, launchProps = {}, resolver = {}) {
@@ -387,6 +391,7 @@ class BundlerDevServer {
                     hostType: "localhost"
                 })
             });
+            await this.platformManagers[platform]?.updatePackageName?.();
         }
         return this.platformManagers[platform];
     }
diff --git a/node_modules/@expo/cli/build/src/start/startAsync.js b/node_modules/@expo/cli/build/src/start/startAsync.js
index 1a57514..a690157 100644
--- a/node_modules/@expo/cli/build/src/start/startAsync.js
+++ b/node_modules/@expo/cli/build/src/start/startAsync.js
@@ -166,6 +166,7 @@ async function startAsync(projectRoot, options, settings) {
     if ((0, _interactive.isInteractive)()) {
         var _platforms;
         await (0, _profile.profile)(_startInterface.startInterfaceAsync)(devServerManager, {
+            appId: options?.appId,
             platforms: (_platforms = exp.platforms) != null ? _platforms : [
                 "ios",
                 "android",
